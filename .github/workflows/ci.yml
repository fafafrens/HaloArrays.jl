name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        julia-version: ['1.10', '1.11']
  
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@v2
        with:
          version: ${{ matrix.julia-version }}
      - name: Cache artifacts
        uses: actions/cache@v4
        with:
          path: ~/.julia/artifacts
          key: ${{ runner.os }}-julia-artifacts-${{ hashFiles('**/Project.toml') }}
          restore-keys: |
            ${{ runner.os }}-julia-artifacts-
      - name: Instantiate
        run: julia --project=. -e 'using Pkg; Pkg.instantiate()'
      - name: Run unit tests (no MPI)
        env:
          HALOARRAYS_RUN_UNIT_TESTS: "true"
          HALOARRAYS_RUN_MPI_TESTS: "false"
        run: julia --project=. -e 'using Pkg; Pkg.test()'

  mpitests:
    strategy:
      fail-fast: false
      matrix:
        np: [2, 4]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@v2
        with:
          version: '1.11'
      - name: Install test extras
        run: julia --project=. -e 'using Pkg; Pkg.add(["BenchmarkTools","OrdinaryDiffEq"])'
      - name: Configure MPI provider
        run: julia --project=. -e 'using MPIPreferences; MPIPreferences.use_jll_binary("MPICH_jll")'
      - name: Instantiate
        run: julia --project=. -e 'using Pkg; Pkg.instantiate()'
      - name: Precompile (ensure deps are ready)
        run: julia --project=. -e 'using Pkg; Pkg.precompile(); using HaloArrays'
      - name: Run MPI tests
        env:
          HALOARRAYS_RUN_UNIT_TESTS: "false"
          HALOARRAYS_RUN_MPI_TESTS: "true"
          NP: ${{ matrix.np }}
        run: |
          julia --project=. -e '
          using Pkg
          using MPI
          n = parse(Int, ENV["NP"])
          cmd = `$(MPI.mpiexec()) -n $n $(Base.julia_cmd()) --project=. -e "include(joinpath(pwd(),\"test\",\"runtests.jl\"))"`
          println(cmd)
          run(cmd)
          '
